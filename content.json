{"meta":{"title":"","subtitle":"","description":"","author":"biankunchao","url":"http://biankunchao.top","root":"/"},"posts":[{"title":"一名Java开发的Vue之路","date":"2020-04-05T14:36:23.000Z","path":"2020/04/05/studyVue/","text":"Vue 学习笔记生命周期每个Vue实例在被创建时都要经过一系列化的初始化过程，整个过程称为Vue实例的生命周期 初始化(1-4)，更新(5-6)，销毁(7-8) beforeCreate(){}：组件实例还未创建。 created(){}：组件初始化完毕，数据可以使用，常用于异步数据获取。 beforeMount(){}：dom未创建，未执行渲染、更新。 Mounted(){}：初始化结束，dom已创建，可用于访问数据和dom元素。 beforeUpdate(){}：更新前，可用于获取更新前各种状态。 updated(){}：更新后，所有状态已是最新的。 beforeDestory(){}：销毁前，可用于一些定时器的取消，释放资源。 destoryed(){}：组件已销毁。 计算属性computed： 计算属性有缓存性；值未发生变化，页面就不会重新渲染； 应用场景：A通过B/C/D..计算得来；如果C有变动，那么A也要随着C的变动而更新 注：total不需要声明属性 123&lt;!-- 插值total --&gt;&lt;!-- &lt;h2&gt;总条数：&#123;&#123;bookList.length&#125;&#125;&lt;/h2&gt; --&gt;&lt;h2&gt;总条数：&#123;&#123;total&#125;&#125;&lt;/h2&gt; 123456computed: &#123; //当total发生变化，return新的值 total() &#123; return this.bookList.length &#125;&#125;, 侦听器watch：对一个变量进行监听，当变量发生变化时，执行函数 应用场景：监听的值有变动，我就要做一些逻辑处理 注：以下方法为默认方法；页面初始化时不会执行，当页面加载完毕，数据发生后才会执行 123456&lt;!-- bookList为数组 --&gt;&lt;div v-for=\"books in bookList\" :key=\"books\"&gt; &#123;&#123;books&#125;&#125;&lt;/div&gt;&lt;!-- &lt;h2&gt;总条数：&#123;&#123;bookList.length&#125;&#125;&lt;/h2&gt; --&gt;&lt;h2&gt;总条数：&#123;&#123;total&#125;&#125;&lt;/h2&gt; 123456watch: &#123; //对bookList进行监控，当bookList变化时会自动调用该函数 bookList(newValue, oldValue) &#123; this.total = newValue.length &#125;&#125; 带选项的watch：以下方法设置立即执行；页面初始化也会执行一下 12345678910watch: &#123; //对bookList进行监控，当bookList变化时会自动调用该函数 bookList: &#123; immediate: true, //立即执行 deep: true, handler(newValue, oldValue) &#123; this.total = newValue.length &#125; &#125;&#125;, 组件化Component：组件系统是Vue.js其中一个重要的概念，它提供了一种抽象，让我们可以使用独立可复用的小组件来构建大型应用。 组件在实际开发中有很多应用，比如：多个页面(A页面、B页面、C页面)使用的页头是一样的，我们就可以把页头提取出来，作为一个组件，多个页面(A页面、B页面、C页面)将组件引入即可，从而减少代码量，增强代码的复用性；如果后期头部样式有变更，我们只需修改组件即可，进而提高可维护性。 定义组件、使用组件、以及组件传值； 示例一：父组件创建bookList，传入子组件并进行展示 创建了一个自定义子组件 1234567891011121314151617// 定义一个简单的组件Vue.component('book-list',&#123; // bool-List:组件名，不支持驼峰命名； props:&#123; // 接收属性参数 bookss&#123; // 接收key type:Array, // 定义参数类型 default:[] // 定义参数默认值 &#125; &#125; // template里最好是单根形式 template: '&lt;div&gt; &lt;div v-if=\"bookss.length == 0\"&gt;书架空荡荡~&lt;/div&gt; &lt;div v-else v-for=\"book in bookss\" :key=\"book\"&gt; &#123;&#123;book&#125;&#125; &lt;/div&gt; &lt;/div&gt;'&#125;); 父组件：在Vue实例挂载的DOM元素中使用组件 1234567&lt;!-- 直接使用组件名称即可，将父组件定义的bookList传给子组件bookss --&gt;&lt;book-list :bookss=\"bookList\"&gt;&lt;/book-list&gt;data() &#123; return &#123; bookList:[\"安徒生童话\",\"格林童话\"] &#125;&#125;, 定义组件，实现双绑 示例二：子组件新增book 123456789101112131415161718Vue.component('book-add',&#123; props: [\"value\"], template: ` &lt;div&gt; &lt;span&gt;新增：&lt;/span&gt; &lt;input type=\"text\" :value=\"value\" @input=\"onInput\" @keydown.enter=\"addBook\"/&gt; &lt;/div&gt; `, methods: &#123; addBook()&#123; this.$emit(\"add-book\") &#125;, onInput(e)&#123; // 派发自定事件，将最新的input值传出去e.target.value this.$emit('input', e.target.value) &#125; &#125;&#125;) 父组件：在Vue实例挂载的DOM元素中使用组件 12345678910111213141516171819&lt;!-- 直接使用组件名称即可，将父组件定义的bookList传给子组件bookss --&gt;&lt;book-add :value=\"book\" @input=\"val =&gt; book = val\" @add-book=\"addBook\"&gt;&lt;/book-add&gt;data() &#123; return &#123; book: \"\" &#125;&#125;,methods: &#123; addBook()&#123; console.log(\"父addBook\"); console.log(this.book); if(this.book == \"\")&#123; return; &#125; //将子组件的book新增 this.bookList.push(this.book) this.book = \"\" &#125;&#125; 插值slot：插槽简单来说，就是子组件提供给父组件使用的一个占位符，用 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的标签。 定义简单的组件插槽 示例一：定义一个message弹出框作为子组件；父组件通过isShow控制子组件是否显示，父组件通过插槽控制子组件显示内容 子组件 12345678910111213141516// 定义组件(使用插槽):该组件是一个message弹出框,通过布尔值show的值决定显示和隐藏Vue.component('message',&#123; props: ['show'], template: ` &lt;div class=\"message-box\" v-if=\"show\"&gt; &lt;!-- 通过slot插槽,获取传入的内容 --&gt; &lt;slot&gt;&lt;/slot&gt; &lt;!-- 第一种写法 --&gt; &lt;!-- 通过click事件派发任务，传递false，父组件接收后对isShow赋值，传入子组件show，实现隐藏 --&gt; &lt;!-- &lt;span class=\"message-box-close\" @click=\"$emit('close', false)\"&gt;X&lt;/span&gt; --&gt; &lt;!-- 第二种写法 --&gt; &lt;!-- 通过click事件派发任务，传递false，使用固定的update传父组件，传入子组件show，实现隐藏 --&gt; &lt;span class=\"message-box-close\" @click=\"$emit('update:show', false)\"&gt;X&lt;/span&gt; &lt;/div&gt;`&#125;) 父组件 123456789101112131415161718192021222324&lt;!-- 弹窗组件 第一种写法 --&gt;&lt;message :show=\"isShow\" @close=\"isShow = $event\"&gt;&#123;&#123;messageText&#125;&#125;&lt;/message&gt;&lt;!-- 弹窗组件 第二种写法 :show.sync @update:show='' --&gt;&lt;message :show.sync=\"isShow\"&gt;&#123;&#123;messageText&#125;&#125;&lt;/message&gt;data() &#123; return &#123; isShow: false, //默认false隐藏 messageText: \"保存成功\" //显示值 &#125;&#125;,methods: &#123; addBook()&#123; if(this.book == \"\")&#123; return; &#125; //将子组件的book新增 this.bookList.push(this.book) this.book = \"\" // 新增成功后 将isShow赋值为true，将弹窗显示 this.isShow = true &#125;&#125;, 在实际开发中会存在很多独立的内容要分发，可以使用具名插槽：v-solt:name 示例二：添加一个title部分 定义子组件，使用具名插槽 1234567891011Vue.component('message',&#123; props: ['show'], template: ` &lt;div class=\"message-box\" v-if=\"show\"&gt; &lt;!-- 名为title的插槽,可以设置默认内容,若无父组件指定,则使用默认 --&gt; &lt;slot name='title'&gt;&lt;h1&gt;默认&lt;/h1&gt;&lt;/slot&gt; &lt;!-- 默认插槽 --&gt; &lt;slot&gt;&lt;/slot&gt; &lt;span class=\"message-box-close\" @click=\"$emit('update:show', false)\"&gt;X&lt;/span&gt; &lt;/div&gt;`&#125;) 父组件 123456789&lt;!-- 弹窗组件 --&gt;&lt;message :show.sync=\"isShow\"&gt; &lt;!-- 命名为title的插槽内容 : v-slot:title --&gt; &lt;template v-slot:title&gt; &lt;h3&gt;提示:&lt;/h3&gt; &lt;/template&gt; &lt;!-- 默认插槽内容 : v-slot:default --&gt; &lt;template&gt;&#123;&#123;messageText&#125;&#125;&lt;/template&gt;&lt;/message&gt; 作用域插槽定义方式： 1234567&lt;!-- 父组件 --&gt;&lt;template v-slot:title=\"slotApp\"&gt; &lt;h3&gt;&#123;&#123;slotApp.title&#125;&#125;&lt;/h3&gt;&lt;/template&gt;&lt;!-- 子组件 --&gt;&lt;slot name='title' title=\"子组件的值\"&gt;&lt;h1&gt;默认&lt;/h1&gt;&lt;/slot&gt;","raw":"---\ntitle: 一名Java开发的Vue之路\ntags: [前端, Vue]\ncategories: Vue\nlink: https://github.com/biankunchao\ndate: 2020-04-05 22:36:23\n---\n\n## Vue 学习笔记\n\n### 生命周期\n\n每个Vue实例在被创建时都要经过一系列化的初始化过程，整个过程称为Vue实例的**生命周期**\n\n初始化(1-4)，更新(5-6)，销毁(7-8)\n\n1. beforeCreate(){}：组件实例还未创建。\n\n2. created(){}：组件初始化完毕，数据可以使用，常用于异步数据获取。\n\n3. beforeMount(){}：dom未创建，未执行渲染、更新。\n\n4. Mounted(){}：初始化结束，dom已创建，可用于访问数据和dom元素。\n\n5. beforeUpdate(){}：更新前，可用于获取更新前各种状态。\n\n6. updated(){}：更新后，所有状态已是最新的。\n\n7. beforeDestory(){}：销毁前，可用于一些定时器的取消，释放资源。\n\n8. destoryed(){}：组件已销毁。\n\n   \n\n### 计算属性\n\ncomputed：\n\n计算属性有缓存性；值未发生变化，页面就不会重新渲染；\n\n应用场景：A通过B/C/D..计算得来；如果C有变动，那么A也要随着C的变动而更新\n\n注：total不需要声明属性\n\n```html\n<!-- 插值total -->\n<!-- <h2>总条数：{{bookList.length}}</h2> -->\n<h2>总条数：{{total}}</h2>\n```\n\n```js\ncomputed: {\n  //当total发生变化，return新的值\n  total() {\n    return this.bookList.length \n  }\n},\n```\n\n\n\n### 侦听器\n\nwatch：对一个变量进行监听，当变量发生变化时，执行函数\n\n应用场景：监听的值有变动，我就要做一些逻辑处理\n\n注：以下方法为默认方法；页面初始化时不会执行，当页面加载完毕，数据发生后才会执行\n\n```html\n<!-- bookList为数组 -->\n<div v-for=\"books in bookList\" :key=\"books\">\n  {{books}}\n</div>\n<!-- <h2>总条数：{{bookList.length}}</h2> -->\n<h2>总条数：{{total}}</h2>\n```\n\n```js\nwatch: {\n  //对bookList进行监控，当bookList变化时会自动调用该函数\n  bookList(newValue, oldValue) {\n    this.total = newValue.length\n  }\n}\n```\n\n带选项的watch：以下方法设置立即执行；页面初始化也会执行一下\n\n```js\nwatch: {\n  //对bookList进行监控，当bookList变化时会自动调用该函数\n  bookList: {\n    immediate: true,\t//立即执行\n    deep: true,\n    handler(newValue, oldValue) {\n      this.total = newValue.length\n    }\n  }\n},\n```\n\n\n\n### 组件化\n\nComponent：组件系统是Vue.js其中一个重要的概念，它提供了一种抽象，让我们可以使用独立可复用的小组件来构建大型应用。\n\n组件在实际开发中有很多应用，比如：多个页面(A页面、B页面、C页面)使用的页头是一样的，我们就可以把页头提取出来，作为一个组件，多个页面(A页面、B页面、C页面)将组件引入即可，从而减少代码量，增强代码的复用性；如果后期头部样式有变更，我们只需修改组件即可，进而提高可维护性。\n\n> 定义组件、使用组件、以及组件传值；\n\n`示例一：`父组件创建bookList，传入子组件并进行展示\n\n创建了一个自定义子组件\n\n```js\n// 定义一个简单的组件\nVue.component('book-list',{\t// bool-List:组件名，不支持驼峰命名；\n  props:{\t// 接收属性参数\n    bookss{\t// 接收key\n      type:Array,\t// 定义参数类型\n      default:[]\t// 定义参数默认值\n    }\n  }\n    // template里最好是单根形式\n  template: \n    '<div>\n      <div v-if=\"bookss.length == 0\">书架空荡荡~</div>\n      <div v-else v-for=\"book in bookss\" :key=\"book\">\n        {{book}}\n      </div>\n    </div>'\n});\n```\n\n父组件：在Vue实例挂载的DOM元素中使用组件\n\n```html\n<!-- 直接使用组件名称即可，将父组件定义的bookList传给子组件bookss -->\n<book-list :bookss=\"bookList\"></book-list>\ndata() {\n  return {\n    bookList:[\"安徒生童话\",\"格林童话\"]\n  }\n},\n```\n\n> 定义组件，实现双绑\n\n`示例二：`子组件新增book\n\n```js\nVue.component('book-add',{\n  props: [\"value\"],\n  template: `\n  <div>\n    <span>新增：</span>\n    <input type=\"text\" :value=\"value\" @input=\"onInput\" @keydown.enter=\"addBook\"/>\n  </div>\n  `,\n  methods: {\n    addBook(){\n      this.$emit(\"add-book\")\n    },\n    onInput(e){\n      // 派发自定事件，将最新的input值传出去e.target.value\n      this.$emit('input', e.target.value)\n    }\n  }\n})\n```\n\n父组件：在Vue实例挂载的DOM元素中使用组件\n\n```html\n<!-- 直接使用组件名称即可，将父组件定义的bookList传给子组件bookss -->\n<book-add :value=\"book\" @input=\"val => book = val\" @add-book=\"addBook\"></book-add>\ndata() {\n  return {\n    book: \"\"\n  }\n},\nmethods: {\n  addBook(){\n    console.log(\"父addBook\");\n    console.log(this.book);\n    if(this.book == \"\"){\n      return;\n    }\n    //将子组件的book新增\n    this.bookList.push(this.book)\n    this.book = \"\"\n  }\n}\n```\n\n\n\n### 插值\n\nslot：插槽简单来说，就是子组件提供给父组件使用的一个占位符，用<slot></slot> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<slot></slot>标签。\n\n> 定义简单的组件插槽\n\n`示例一：`定义一个message弹出框作为子组件；父组件通过isShow控制子组件是否显示，父组件通过插槽控制子组件显示内容\n\n子组件\n\n```javascript\n// 定义组件(使用插槽):该组件是一个message弹出框,通过布尔值show的值决定显示和隐藏\nVue.component('message',{\n  props: ['show'],\n  template: `\n    <div class=\"message-box\" v-if=\"show\">\n      <!-- 通过slot插槽,获取传入的内容 -->\n      <slot></slot>\n      <!-- 第一种写法 -->\n      <!-- 通过click事件派发任务，传递false，父组件接收后对isShow赋值，传入子组件show，实现隐藏 -->\n      <!-- <span class=\"message-box-close\" @click=\"$emit('close', false)\">X</span> -->\n\n      <!-- 第二种写法 -->\n      <!-- 通过click事件派发任务，传递false，使用固定的update传父组件，传入子组件show，实现隐藏 -->\n      <span class=\"message-box-close\" @click=\"$emit('update:show', false)\">X</span>\n    </div>`\n})\n```\n\n父组件\n\n```javascript\n<!-- 弹窗组件 第一种写法 -->\n<message :show=\"isShow\" @close=\"isShow = $event\">{{messageText}}</message>\n\n<!-- 弹窗组件 第二种写法 :show.sync @update:show='' -->\n<message :show.sync=\"isShow\">{{messageText}}</message>\n\ndata() {\n  return {\n    isShow: false,\t//默认false隐藏\n    messageText: \"保存成功\"\t//显示值\n  }\n},\nmethods: {\n  addBook(){\n  if(this.book == \"\"){\n    return;\n  }\n  //将子组件的book新增\n  this.bookList.push(this.book)\n  this.book = \"\"\n  // 新增成功后 将isShow赋值为true，将弹窗显示\n  this.isShow = true\n  }\n},\n```\n\n> 在实际开发中会存在很多独立的内容要分发，可以使用具名插槽：v-solt:name\n\n`示例二：`添加一个title部分\n\n定义子组件，使用具名插槽\n\n```javascript\nVue.component('message',{\n  props: ['show'],\n  template: `\n    <div class=\"message-box\" v-if=\"show\">\n      <!-- 名为title的插槽,可以设置默认内容,若无父组件指定,则使用默认 -->\n      <slot name='title'><h1>默认</h1></slot>\n      <!-- 默认插槽 -->\n      <slot></slot>\n      <span class=\"message-box-close\" @click=\"$emit('update:show', false)\">X</span>\n    </div>`\n})\n```\n\n父组件\n\n```html\n<!-- 弹窗组件 -->\n<message :show.sync=\"isShow\">\n  <!-- 命名为title的插槽内容 : v-slot:title -->\n  <template v-slot:title>\n    <h3>提示:</h3>\n  </template>\n  <!-- 默认插槽内容 : v-slot:default -->\n  <template>{{messageText}}</template>\n</message>\n```\n\n> 作用域插槽定义方式：\n\n```html\n<!-- 父组件 -->\n<template v-slot:title=\"slotApp\">\n  <h3>{{slotApp.title}}</h3>\n</template>\n\n<!-- 子组件 -->\n<slot name='title' title=\"子组件的值\"><h1>默认</h1></slot>\n```\n\n\n","content":"<h2 id=\"Vue-学习笔记\"><a href=\"#Vue-学习笔记\" class=\"headerlink\" title=\"Vue 学习笔记\"></a>Vue 学习笔记</h2><h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p>每个Vue实例在被创建时都要经过一系列化的初始化过程，整个过程称为Vue实例的<strong>生命周期</strong></p>\n<p>初始化(1-4)，更新(5-6)，销毁(7-8)</p>\n<ol>\n<li><p>beforeCreate(){}：组件实例还未创建。</p>\n</li>\n<li><p>created(){}：组件初始化完毕，数据可以使用，常用于异步数据获取。</p>\n</li>\n<li><p>beforeMount(){}：dom未创建，未执行渲染、更新。</p>\n</li>\n<li><p>Mounted(){}：初始化结束，dom已创建，可用于访问数据和dom元素。</p>\n</li>\n<li><p>beforeUpdate(){}：更新前，可用于获取更新前各种状态。</p>\n</li>\n<li><p>updated(){}：更新后，所有状态已是最新的。</p>\n</li>\n<li><p>beforeDestory(){}：销毁前，可用于一些定时器的取消，释放资源。</p>\n</li>\n<li><p>destoryed(){}：组件已销毁。</p>\n</li>\n</ol>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>computed：</p>\n<p>计算属性有缓存性；值未发生变化，页面就不会重新渲染；</p>\n<p>应用场景：A通过B/C/D..计算得来；如果C有变动，那么A也要随着C的变动而更新</p>\n<p>注：total不需要声明属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 插值total --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;h2&gt;总条数：&#123;&#123;bookList.length&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>总条数：&#123;&#123;total&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//当total发生变化，return新的值</span></span><br><span class=\"line\">  total() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bookList.length </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h3><p>watch：对一个变量进行监听，当变量发生变化时，执行函数</p>\n<p>应用场景：监听的值有变动，我就要做一些逻辑处理</p>\n<p>注：以下方法为默认方法；页面初始化时不会执行，当页面加载完毕，数据发生后才会执行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bookList为数组 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"books in bookList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"books\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;books&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;h2&gt;总条数：&#123;&#123;bookList.length&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>总条数：&#123;&#123;total&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//对bookList进行监控，当bookList变化时会自动调用该函数</span></span><br><span class=\"line\">  bookList(newValue, oldValue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.total = newValue.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>带选项的watch：以下方法设置立即执行；页面初始化也会执行一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//对bookList进行监控，当bookList变化时会自动调用该函数</span></span><br><span class=\"line\">  bookList: &#123;</span><br><span class=\"line\">    immediate: <span class=\"literal\">true</span>,\t<span class=\"comment\">//立即执行</span></span><br><span class=\"line\">    deep: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    handler(newValue, oldValue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.total = newValue.length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h3><p>Component：组件系统是Vue.js其中一个重要的概念，它提供了一种抽象，让我们可以使用独立可复用的小组件来构建大型应用。</p>\n<p>组件在实际开发中有很多应用，比如：多个页面(A页面、B页面、C页面)使用的页头是一样的，我们就可以把页头提取出来，作为一个组件，多个页面(A页面、B页面、C页面)将组件引入即可，从而减少代码量，增强代码的复用性；如果后期头部样式有变更，我们只需修改组件即可，进而提高可维护性。</p>\n<blockquote>\n<p>定义组件、使用组件、以及组件传值；</p>\n</blockquote>\n<p><code>示例一：</code>父组件创建bookList，传入子组件并进行展示</p>\n<p>创建了一个自定义子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个简单的组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'book-list'</span>,&#123;\t<span class=\"comment\">// bool-List:组件名，不支持驼峰命名；</span></span><br><span class=\"line\">  props:&#123;\t<span class=\"comment\">// 接收属性参数</span></span><br><span class=\"line\">    bookss&#123;\t<span class=\"comment\">// 接收key</span></span><br><span class=\"line\">      type:<span class=\"built_in\">Array</span>,\t<span class=\"comment\">// 定义参数类型</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:[]\t<span class=\"comment\">// 定义参数默认值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"comment\">// template里最好是单根形式</span></span><br><span class=\"line\">  template: </span><br><span class=\"line\">    <span class=\"string\">'&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div v-if=\"bookss.length == 0\"&gt;书架空荡荡~&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div v-else v-for=\"book in bookss\" :key=\"book\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;&#123;book&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>父组件：在Vue实例挂载的DOM元素中使用组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 直接使用组件名称即可，将父组件定义的bookList传给子组件bookss --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">book-list</span> <span class=\"attr\">:bookss</span>=<span class=\"string\">\"bookList\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">book-list</span>&gt;</span></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    bookList:[\"安徒生童话\",\"格林童话\"]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义组件，实现双绑</p>\n</blockquote>\n<p><code>示例二：</code>子组件新增book</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'book-add'</span>,&#123;</span><br><span class=\"line\">  props: [<span class=\"string\">\"value\"</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;新增：&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input type=\"text\" :value=\"value\" @input=\"onInput\" @keydown.enter=\"addBook\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addBook()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">\"add-book\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onInput(e)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 派发自定事件，将最新的input值传出去e.target.value</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, e.target.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>父组件：在Vue实例挂载的DOM元素中使用组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 直接使用组件名称即可，将父组件定义的bookList传给子组件bookss --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">book-add</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"book\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"val =&gt; book = val\"</span> @<span class=\"attr\">add-book</span>=<span class=\"string\">\"addBook\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">book-add</span>&gt;</span></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    book: \"\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addBook()&#123;</span><br><span class=\"line\">    console.log(\"父addBook\");</span><br><span class=\"line\">    console.log(this.book);</span><br><span class=\"line\">    if(this.book == \"\")&#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //将子组件的book新增</span><br><span class=\"line\">    this.bookList.push(this.book)</span><br><span class=\"line\">    this.book = \"\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>slot：插槽简单来说，就是子组件提供给父组件使用的一个占位符，用<slot></slot> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<slot></slot>标签。</p>\n<blockquote>\n<p>定义简单的组件插槽</p>\n</blockquote>\n<p><code>示例一：</code>定义一个message弹出框作为子组件；父组件通过isShow控制子组件是否显示，父组件通过插槽控制子组件显示内容</p>\n<p>子组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义组件(使用插槽):该组件是一个message弹出框,通过布尔值show的值决定显示和隐藏</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'message'</span>,&#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'show'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"message-box\" v-if=\"show\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 通过slot插槽,获取传入的内容 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 第一种写法 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 通过click事件派发任务，传递false，父组件接收后对isShow赋值，传入子组件show，实现隐藏 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- &lt;span class=\"message-box-close\" @click=\"$emit('close', false)\"&gt;X&lt;/span&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 第二种写法 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 通过click事件派发任务，传递false，使用固定的update传父组件，传入子组件show，实现隐藏 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span class=\"message-box-close\" @click=\"$emit('update:show', false)\"&gt;X&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 弹窗组件 第一种写法 --&gt;</span><br><span class=\"line\">&lt;message :show=<span class=\"string\">\"isShow\"</span> @close=<span class=\"string\">\"isShow = $event\"</span>&gt;&#123;&#123;messageText&#125;&#125;&lt;<span class=\"regexp\">/message&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 弹窗组件 第二种写法 :show.sync @update:show='' --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;message :show.sync=\"isShow\"&gt;&#123;&#123;messageText&#125;&#125;&lt;/m</span>essage&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    isShow: <span class=\"literal\">false</span>,\t<span class=\"comment\">//默认false隐藏</span></span><br><span class=\"line\">    messageText: <span class=\"string\">\"保存成功\"</span>\t<span class=\"comment\">//显示值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addBook()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.book == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将子组件的book新增</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.bookList.push(<span class=\"keyword\">this</span>.book)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.book = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 新增成功后 将isShow赋值为true，将弹窗显示</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isShow = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在实际开发中会存在很多独立的内容要分发，可以使用具名插槽：v-solt:name</p>\n</blockquote>\n<p><code>示例二：</code>添加一个title部分</p>\n<p>定义子组件，使用具名插槽</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'message'</span>,&#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'show'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"message-box\" v-if=\"show\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 名为title的插槽,可以设置默认内容,若无父组件指定,则使用默认 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;slot name='title'&gt;&lt;h1&gt;默认&lt;/h1&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;!-- 默认插槽 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span class=\"message-box-close\" @click=\"$emit('update:show', false)\"&gt;X&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">message</span> <span class=\"attr\">:show.sync</span>=<span class=\"string\">\"isShow\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 命名为title的插槽内容 : v-slot:title --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>提示:<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 默认插槽内容 : v-slot:default --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>&#123;&#123;messageText&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>作用域插槽定义方式：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:title</span>=<span class=\"string\">\"slotApp\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123;slotApp.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">'title'</span> <span class=\"attr\">title</span>=<span class=\"string\">\"子组件的值\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>默认<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","slug":"studyVue","updated":"2020-04-12T11:22:01.557Z","comments":true,"link":"https://github.com/biankunchao","permalink":"http://biankunchao.top/2020/04/05/studyVue/","excerpt":"","categories":[{"name":"Vue","slug":"Vue","permalink":"http://biankunchao.top/categories/Vue/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://biankunchao.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Vue","slug":"Vue","permalink":"http://biankunchao.top/tags/Vue/"}]},{"title":"MySQL：踩坑记录","date":"2020-03-29T13:55:19.000Z","path":"2020/03/29/MySQL20-03-29/","text":"MySQL：踩坑记录 最近开发中遇到一个问题； 需求：如下表，表里信息类型(INFO_TYPE)重复，取出每种信息类型(INFO_TYPE)更新时间(UPDATE_TIM)最新的那一条； 12345678910111213mysql&gt; select * from info;+------+-----------+---------------------+| GUID | INFO_TYPE | UPDATE_TIME |+------+-----------+---------------------+| 1 | 1 | 2020-03-29 23:17:50 || 2 | 2 | 2020-03-26 23:17:59 || 3 | 3 | 2020-03-27 23:18:05 || 4 | 3 | 2020-03-29 23:18:15 || 5 | 2 | 2020-03-29 23:18:27 || 6 | 3 | 2020-03-28 23:18:34 || 7 | 3 | 2020-03-25 23:18:40 || 8 | 2 | 2020-03-26 23:18:52 |+------+-----------+---------------------+ 分析：一个子查询解决：1.排序，2.分组， 1234567891011121314mysql&gt; SELECT * FROM (SELECT * FROM info ORDER BY UPDATE_TIME DESC ) AS a GROUP BY a.INFO_TYPE;+------+-----------+---------------------+| GUID | INFO_TYPE | UPDATE_TIME |+------+-----------+---------------------+| 1 | 1 | 2020-03-29 23:17:50 || 2 | 2 | 2020-03-26 23:17:59 || 3 | 3 | 2020-03-27 23:18:05 |+------+-----------+---------------------+3 rows in set (0.18 sec) 等等！这好像不是我想要的结果，虽然分组了，但是并没有按时间倒序阿！外层的并没有按照子查询的结果进行分组；然后我又反复试了几个方法无果；最终在百度找到了答案，MySQL5.7以后会对排序的sql解析做了优化，子查询会被改为联结查询的形式以节省时间和资源，所以排序是会被忽略！需要在子查询加入limit。 加入limit运行结果： 123456789101112131415mysql&gt; SELECT * FROM (SELECT * FROM info ORDER BY UPDATE_TIME DESC limit 9999) AS a GROUP BY a.INFO_TYPE ORDER BY a.UPDATE_TIME DESC;+------+-----------+---------------------+| GUID | INFO_TYPE | UPDATE_TIME |+------+-----------+---------------------+| 5 | 2 | 2020-03-29 23:18:27 || 4 | 3 | 2020-03-29 23:18:15 || 1 | 1 | 2020-03-29 23:17:50 |+------+-----------+---------------------+3 rows in set (0.18 sec)","raw":"---\ntitle: MySQL：踩坑记录\ntags: [数据库, MySQL]\ncategories: MySQL\nlink: https://github.com/biankunchao\ndate: 2020-03-29 21:55:19\n---\n\n> **MySQL：踩坑记录**\n\n最近开发中遇到一个问题；\n\n需求：如下表，表里信息类型(INFO_TYPE)重复，取出每种信息类型(INFO_TYPE)更新时间(UPDATE_TIM)最新的那一条；\n\n```mysql\nmysql> select * from info;\n+------+-----------+---------------------+\n| GUID | INFO_TYPE | UPDATE_TIME         |\n+------+-----------+---------------------+\n| 1    | 1         | 2020-03-29 23:17:50 |\n| 2    | 2         | 2020-03-26 23:17:59 |\n| 3    | 3         | 2020-03-27 23:18:05 |\n| 4    | 3         | 2020-03-29 23:18:15 |\n| 5    | 2         | 2020-03-29 23:18:27 |\n| 6    | 3         | 2020-03-28 23:18:34 |\n| 7    | 3         | 2020-03-25 23:18:40 |\n| 8    | 2         | 2020-03-26 23:18:52 |\n+------+-----------+---------------------+\n```\n\n分析：一个子查询解决：1.排序，2.分组，\n\n```mysql\nmysql> SELECT *\n       FROM (SELECT *\n             FROM info\n             ORDER BY UPDATE_TIME DESC\n             ) AS a\n       GROUP BY a.INFO_TYPE;\n+------+-----------+---------------------+\n| GUID | INFO_TYPE | UPDATE_TIME         |\n+------+-----------+---------------------+\n| 1    | 1         | 2020-03-29 23:17:50 |\n| 2    | 2         | 2020-03-26 23:17:59 |\n| 3    | 3         | 2020-03-27 23:18:05 |\n+------+-----------+---------------------+\n3 rows in set (0.18 sec)\n```\n\n等等！这好像不是我想要的结果，虽然分组了，但是并没有按时间倒序阿！外层的并没有按照子查询的结果进行分组；然后我又反复试了几个方法无果；最终在百度找到了答案，MySQL5.7以后会对排序的sql解析做了优化，子查询会被改为联结查询的形式以节省时间和资源，所以排序是会被忽略！需要在子查询加入limit。\n\n加入limit运行结果：\n\n```mysql\nmysql> SELECT *\n       FROM (SELECT *\n             FROM info\n             ORDER BY UPDATE_TIME DESC\n             limit 9999) AS a\n       GROUP BY a.INFO_TYPE\n       ORDER BY a.UPDATE_TIME DESC;\n+------+-----------+---------------------+\n| GUID | INFO_TYPE | UPDATE_TIME         |\n+------+-----------+---------------------+\n| 5    | 2         | 2020-03-29 23:18:27 |\n| 4    | 3         | 2020-03-29 23:18:15 |\n| 1    | 1         | 2020-03-29 23:17:50 |\n+------+-----------+---------------------+\n3 rows in set (0.18 sec)\n\n```","content":"<blockquote>\n<p><strong>MySQL：踩坑记录</strong></p>\n</blockquote>\n<p>最近开发中遇到一个问题；</p>\n<p>需求：如下表，表里信息类型(INFO_TYPE)重复，取出每种信息类型(INFO_TYPE)更新时间(UPDATE_TIM)最新的那一条；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from info;</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">| GUID | INFO_TYPE | UPDATE_TIME         |</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">| 1    | 1         | 2020-03-29 23:17:50 |</span><br><span class=\"line\">| 2    | 2         | 2020-03-26 23:17:59 |</span><br><span class=\"line\">| 3    | 3         | 2020-03-27 23:18:05 |</span><br><span class=\"line\">| 4    | 3         | 2020-03-29 23:18:15 |</span><br><span class=\"line\">| 5    | 2         | 2020-03-29 23:18:27 |</span><br><span class=\"line\">| 6    | 3         | 2020-03-28 23:18:34 |</span><br><span class=\"line\">| 7    | 3         | 2020-03-25 23:18:40 |</span><br><span class=\"line\">| 8    | 2         | 2020-03-26 23:18:52 |</span><br><span class=\"line\">+------+-----------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<p>分析：一个子查询解决：1.排序，2.分组，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT *</span><br><span class=\"line\">       FROM (SELECT *</span><br><span class=\"line\">             FROM info</span><br><span class=\"line\">             ORDER BY UPDATE_TIME DESC</span><br><span class=\"line\">             ) AS a</span><br><span class=\"line\">       GROUP BY a.INFO_TYPE;</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">| GUID | INFO_TYPE | UPDATE_TIME         |</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">| 1    | 1         | 2020-03-29 23:17:50 |</span><br><span class=\"line\">| 2    | 2         | 2020-03-26 23:17:59 |</span><br><span class=\"line\">| 3    | 3         | 2020-03-27 23:18:05 |</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">3 rows in set (0.18 sec)</span><br></pre></td></tr></table></figure>\n\n<p>等等！这好像不是我想要的结果，虽然分组了，但是并没有按时间倒序阿！外层的并没有按照子查询的结果进行分组；然后我又反复试了几个方法无果；最终在百度找到了答案，MySQL5.7以后会对排序的sql解析做了优化，子查询会被改为联结查询的形式以节省时间和资源，所以排序是会被忽略！需要在子查询加入limit。</p>\n<p>加入limit运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT *</span><br><span class=\"line\">       FROM (SELECT *</span><br><span class=\"line\">             FROM info</span><br><span class=\"line\">             ORDER BY UPDATE_TIME DESC</span><br><span class=\"line\">             limit 9999) AS a</span><br><span class=\"line\">       GROUP BY a.INFO_TYPE</span><br><span class=\"line\">       ORDER BY a.UPDATE_TIME DESC;</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">| GUID | INFO_TYPE | UPDATE_TIME         |</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">| 5    | 2         | 2020-03-29 23:18:27 |</span><br><span class=\"line\">| 4    | 3         | 2020-03-29 23:18:15 |</span><br><span class=\"line\">| 1    | 1         | 2020-03-29 23:17:50 |</span><br><span class=\"line\">+------+-----------+---------------------+</span><br><span class=\"line\">3 rows in set (0.18 sec)</span><br></pre></td></tr></table></figure>","slug":"MySQL20-03-29","updated":"2020-04-12T08:27:34.205Z","comments":true,"link":"https://github.com/biankunchao","permalink":"http://biankunchao.top/2020/03/29/MySQL20-03-29/","excerpt":"","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://biankunchao.top/categories/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://biankunchao.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"http://biankunchao.top/tags/MySQL/"}]},{"title":"Hello World","date":"2020-03-20T16:05:11.050Z","path":"2020/03/21/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","slug":"hello-world","updated":"2020-03-20T16:05:11.050Z","comments":true,"link":"","permalink":"http://biankunchao.top/2020/03/21/hello-world/","excerpt":"","categories":[],"tags":[]}]}